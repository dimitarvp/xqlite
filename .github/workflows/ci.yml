name: Xqlite

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  ELIXIR_VERSION: "1.18"
  OTP_VERSION: "27"
  ARTIFACT_NAME: xqlite-build-artifacts-${{ github.sha }}

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"

      - name: Restore Elixir dependencies cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile project with NIF
        run: mix compile

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            _build
            deps
            priv/native
            native/xqlitenif/target
          retention-days: 1

  lint:
    name: Lint Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"

      - name: Check Elixir formatting
        run: mix format --check-formatted

      - name: Rust formatting
        run: cargo fmt --manifest-path native/xqlitenif/Cargo.toml -- --check

      - name: Rust clippy
        run: cargo clippy --manifest-path native/xqlitenif/Cargo.toml -- -D warnings

  dialyzer:
    name: Dialyzer Type Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore Dialyzer PLT cache
        uses: actions/cache@v4
        with:
          path: priv/plts
          key: ${{ runner.os }}-plt-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-plt-

      - name: Create PLT (if not cached or outdated)
        run: mix dialyzer --plt

      - name: Run Dialyzer
        run: mix dialyzer --format short

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Run tests
        run: mix test --max-cases 1 --trace --preload-modules
