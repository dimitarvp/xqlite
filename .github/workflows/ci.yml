name: Xqlite

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  ELIXIR_VERSION: "1.18"
  OTP_VERSION: "27"
  # Define a name for our build artifact
  ARTIFACT_NAME: xqlite-build-${{ github.sha }}

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"

      - name: Restore Elixir dependencies cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ hashFiles('**/mix.lock') }}

      - name: Install dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Compile project
        run: mix compile

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: . # Upload the entire compiled project directory

  lint:
    name: Lint Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Set up Rust for cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"

      - name: Check Elixir formatting
        run: mix format --check-formatted

      - name: Rust formatting
        run: cargo fmt --manifest-path native/xqlitenif/Cargo.toml -- --check

      - name: Rust clippy
        run: cargo clippy --manifest-path native/xqlitenif/Cargo.toml -- -D warnings

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Run tests
        run: mix test --max-cases 1 --trace --preload-modules
