rustler::atoms! {
    asc,
    atom,
    binary,
    cannot_convert_atom_to_string,
    cannot_convert_to_sqlite_value,
    cannot_execute,
    cannot_execute_pragma,
    cannot_fetch_row,
    cannot_open_database,
    cannot_prepare_statement,
    cascade,
    code,
    columns,
    constraint_check,
    constraint_commit_hook,
    constraint_datatype,
    constraint_foreign_key,
    constraint_function,
    constraint_not_null,
    constraint_pinned,
    constraint_primary_key,
    constraint_rowid,
    constraint_trigger,
    constraint_unique,
    constraint_violation,
    constraint_vtab,
    create_index,
    database_busy_or_locked,
    desc,
    error,
    execute_returned_results,
    expected,
    expected_keyword_list,
    expected_keyword_tuple,
    expected_list,
    float,
    from_sql_conversion_failure,
    full,
    function,
    hidden_alias,
    index_exists,
    integer,
    integral_value_out_of_range,
    internal_encoding_error,
    invalid_column_index,
    invalid_column_name,
    invalid_column_type,
    invalid_parameter_count,
    invalid_parameter_name,
    list,
    lock_error,
    map,
    message,
    multiple_statements,
    no_action,
    no_such_index,
    no_such_table,
    no_value,
    none,
    normal,
    null_byte_in_string,
    num_rows,
    numeric,
    offset,
    operation_cancelled,
    partial,
    pid,
    port,
    primary_key_constraint,
    provided,
    read_only_database,
    reference,
    restrict,
    rows,
    schema_changed,
    schema_parsing_error,
    sequence,
    set_default,
    set_null,
    shadow,
    simple,
    sql,
    sql_input_error,
    sqlite_failure,
    stored_generated,
    table,
    table_exists,
    text,
    to_sql_conversion_failure,
    tuple,
    unexpected_value,
    unique_constraint,
    unknown,
    unsupported_atom,
    unsupported_data_type,
    utf8_error,
    r#virtual,
    virtual_generated,
    view
}

mod error;
mod nif;
mod schema;
mod util;

use rustler::{Env, Term};

fn on_load(_env: Env, _info: Term) -> bool {
    true
}

rustler::init!("Elixir.XqliteNIF", load = on_load);
